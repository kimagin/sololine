{"version":3,"sources":["../src/functions/pause.ts"],"names":[],"mappings":";AAiCO,SAAS,MAAM,IAA2B;AAC/C,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,eAAW,MAAM;AACf,UAAI;AACF,gBAAQ;AAAA,MACV,SAAS,OAAO;AACd,eAAO,KAAK;AAAA,MACd;AAAA,IACF,GAAG,EAAE;AAAA,EACP,CAAC;AACH","sourcesContent":["/**\n * Pauses the execution of your code for a specified amount of time.\n *\n * @param {number} ms - The time to wait in milliseconds.\n * @returns {Promise<void>} A promise that resolves after the specified delay.\n *\n * **Example Usage:**\n *\n * Suppose you want to simulate a delay between two API requests. You can use the `pause` function to pause the execution of your code for a certain amount of time.\n *\n * ```javascript\n * import { pause } from './pause';\n *\n * async function makeApiRequests() {\n *   try {\n *     // Make first API request\n *     const response1 = await fetch('https://api.example.com/data1');\n *     console.log(response1);\n *\n *     // Pause for 2 seconds before making the second request\n *     await pause(2000); // 2000 milliseconds = 2 seconds\n *\n *     // Make second API request\n *     const response2 = await fetch('https://api.example.com/data2');\n *     console.log(response2);\n *   } catch (error) {\n *     console.error(error);\n *   }\n * }\n *\n * makeApiRequests();\n * ```\n */\nexport function pause(ms: number): Promise<void> {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      try {\n        resolve()\n      } catch (error) {\n        reject(error)\n      }\n    }, ms)\n  })\n}\n"]}