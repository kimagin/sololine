{"version":3,"sources":["../src/functions/repeat.ts"],"names":[],"mappings":";AAmCA,eAAsB,OACpB,mBACA,UAAyB,CAAC,GACX;AACf,QAAM,EAAE,SAAS,WAAW,GAAG,aAAa,IAAI;AAEhD,SAAO,IAAI,QAAc,CAAC,YAAY;AACpC,QAAI,YAAY,YAAY,IAAI;AAChC,QAAI;AAEJ,UAAM,UAAU,CAAC,cAAsB;AACrC,YAAM,cAAc,YAAY;AAChC,UAAI,eAAe,UAAU;AAC3B,0BAAkB;AAClB,oBAAY,YAAa,cAAc;AAAA,MACzC;AACA,kBAAY,sBAAsB,OAAO;AAAA,IAC3C;AAEA,UAAM,OAAO,MAAM;AACjB,2BAAqB,SAAS;AAC9B,UAAI,aAAc,cAAa;AAC/B,cAAQ;AAAA,IACV;AAEA,QAAI,QAAS,YAAW,MAAM,OAAO;AAErC,gBAAY,sBAAsB,OAAO;AAAA,EAC3C,CAAC;AACH","sourcesContent":["interface RepeatOptions {\n  timeout?: number\n  interval?: number\n  exitFunction?: () => void\n}\n\n/**\n *\n * ---\n * **Description:**\n * *Executes a function repeatedly at a specified interval using requestAnimationFrame by default, with options to control the timeout, interval, and exit function.*\n *\n * **Example usage:**\n * ```js\n * // Repeat the function every 1000ms (1 second)\n * await repeat(myFunction, { interval: 1000 });\n *\n * // Repeat the function every 500ms (0.5 second) with a timeout of 5000ms (5 seconds)\n * await repeat(myFunction, { interval: 500, timeout: 5000 });\n *\n * // Repeat the function with a custom exit function\n * await repeat(myFunction, {\n *   interval: 100,\n *   exitFunction: () => console.log(\"Exiting repeat function\")\n * });\n * ```\n * ---\n *\n * @param {Function} repeatingFunction *input: The function to be executed repeatedly.*\n * @param {Object} [options] **Options :**\n * - **timeout:** The timeout duration in milliseconds before stopping the repetition.\n * - **interval:** The interval duration in milliseconds between function calls.\n * - **exitFunction:** A function to execute when the repetition stops.\n * @returns {Promise<void>} A promise that resolves when the repetition is stopped.\n */\nexport async function repeat(\n  repeatingFunction: Function,\n  options: RepeatOptions = {}\n): Promise<void> {\n  const { timeout, interval = 1, exitFunction } = options\n\n  return new Promise<void>((resolve) => {\n    let startTime = performance.now()\n    let requestId: number\n\n    const execute = (timestamp: number) => {\n      const elapsedTime = timestamp - startTime\n      if (elapsedTime >= interval) {\n        repeatingFunction()\n        startTime = timestamp - (elapsedTime % interval)\n      }\n      requestId = requestAnimationFrame(execute)\n    }\n\n    const stop = () => {\n      cancelAnimationFrame(requestId)\n      if (exitFunction) exitFunction()\n      resolve()\n    }\n\n    if (timeout) setTimeout(stop, timeout)\n\n    requestId = requestAnimationFrame(execute)\n  })\n}\n"]}